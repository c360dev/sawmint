// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/c360dev/sawmint/models"
)

// GetStateAddressHandlerFunc turns a function with the right signature into a get state address handler
type GetStateAddressHandlerFunc func(GetStateAddressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetStateAddressHandlerFunc) Handle(params GetStateAddressParams) middleware.Responder {
	return fn(params)
}

// GetStateAddressHandler interface for that can handle valid get state address params
type GetStateAddressHandler interface {
	Handle(GetStateAddressParams) middleware.Responder
}

// NewGetStateAddress creates a new http.Handler for the get state address operation
func NewGetStateAddress(ctx *middleware.Context, handler GetStateAddressHandler) *GetStateAddress {
	return &GetStateAddress{Context: ctx, Handler: handler}
}

/*GetStateAddress swagger:route GET /state/{address} getStateAddress

Fetches a particular leaf from the current state

Takes full 70-character address and fetches a particular leaf. For partial address (i.e., group of leaves) use `/state` above.


*/
type GetStateAddress struct {
	Context *middleware.Context
	Handler GetStateAddressHandler
}

func (o *GetStateAddress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetStateAddressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetStateAddressOKBody get state address o k body
// swagger:model GetStateAddressOKBody
type GetStateAddressOKBody struct {

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// head
	Head models.Head `json:"head,omitempty"`

	// link
	Link models.Link `json:"link,omitempty"`
}

// Validate validates this get state address o k body
func (o *GetStateAddressOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHead(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStateAddressOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (o *GetStateAddressOKBody) validateHead(formats strfmt.Registry) error {

	if swag.IsZero(o.Head) { // not required
		return nil
	}

	if err := o.Head.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getStateAddressOK" + "." + "head")
		}
		return err
	}

	return nil
}

func (o *GetStateAddressOKBody) validateLink(formats strfmt.Registry) error {

	if swag.IsZero(o.Link) { // not required
		return nil
	}

	if err := o.Link.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getStateAddressOK" + "." + "link")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStateAddressOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStateAddressOKBody) UnmarshalBinary(b []byte) error {
	var res GetStateAddressOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
