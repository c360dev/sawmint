// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/c360dev/sawmint/models"
)

// GetStatusHandlerFunc turns a function with the right signature into a get status handler
type GetStatusHandlerFunc func(GetStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetStatusHandlerFunc) Handle(params GetStatusParams) middleware.Responder {
	return fn(params)
}

// GetStatusHandler interface for that can handle valid get status params
type GetStatusHandler interface {
	Handle(GetStatusParams) middleware.Responder
}

// NewGetStatus creates a new http.Handler for the get status operation
func NewGetStatus(ctx *middleware.Context, handler GetStatusHandler) *GetStatus {
	return &GetStatus{Context: ctx, Handler: handler}
}

/*GetStatus swagger:route GET /status getStatus

Fetches information pertaining to the status of the validator

*/
type GetStatus struct {
	Context *middleware.Context
	Handler GetStatusHandler
}

func (o *GetStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetStatusParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetStatusOKBody get status o k body
// swagger:model GetStatusOKBody
type GetStatusOKBody struct {

	// data
	Data *GetStatusOKBodyData `json:"data,omitempty"`

	// link
	Link models.Link `json:"link,omitempty"`
}

// Validate validates this get status o k body
func (o *GetStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStatusOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStatusOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

func (o *GetStatusOKBody) validateLink(formats strfmt.Registry) error {

	if swag.IsZero(o.Link) { // not required
		return nil
	}

	if err := o.Link.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getStatusOK" + "." + "link")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetStatusOKBodyData get status o k body data
// swagger:model GetStatusOKBodyData
type GetStatusOKBodyData struct {

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// peers
	Peers []*GetStatusOKBodyDataPeersItems0 `json:"peers"`
}

// Validate validates this get status o k body data
func (o *GetStatusOKBodyData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePeers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStatusOKBodyData) validatePeers(formats strfmt.Registry) error {

	if swag.IsZero(o.Peers) { // not required
		return nil
	}

	for i := 0; i < len(o.Peers); i++ {
		if swag.IsZero(o.Peers[i]) { // not required
			continue
		}

		if o.Peers[i] != nil {
			if err := o.Peers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getStatusOK" + "." + "data" + "." + "peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStatusOKBodyData) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStatusOKBodyData) UnmarshalBinary(b []byte) error {
	var res GetStatusOKBodyData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetStatusOKBodyDataPeersItems0 get status o k body data peers items0
// swagger:model GetStatusOKBodyDataPeersItems0
type GetStatusOKBodyDataPeersItems0 struct {

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`
}

// Validate validates this get status o k body data peers items0
func (o *GetStatusOKBodyDataPeersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetStatusOKBodyDataPeersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStatusOKBodyDataPeersItems0) UnmarshalBinary(b []byte) error {
	var res GetStatusOKBodyDataPeersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
