// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostBatchStatusesParams creates a new PostBatchStatusesParams object
// no default values defined in spec.
func NewPostBatchStatusesParams() PostBatchStatusesParams {

	return PostBatchStatusesParams{}
}

// PostBatchStatusesParams contains all the bound params for the post batch statuses operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostBatchStatuses
type PostBatchStatusesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A JSON array of batch id strings
	  Required: true
	  In: body
	*/
	BatchIds []string
	/*A time in seconds to wait for commit
	  In: query
	*/
	Wait *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostBatchStatusesParams() beforehand.
func (o *PostBatchStatusesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body []string
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("batchIds", "body"))
			} else {
				res = append(res, errors.NewParseError("batchIds", "body", "", err))
			}
		} else {
			// no validation required on inline body
			o.BatchIds = body
		}
	} else {
		res = append(res, errors.Required("batchIds", "body"))
	}
	qWait, qhkWait, _ := qs.GetOK("wait")
	if err := o.bindWait(qWait, qhkWait, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindWait binds and validates parameter Wait from query.
func (o *PostBatchStatusesParams) bindWait(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("wait", "query", "int64", raw)
	}
	o.Wait = &value

	return nil
}
