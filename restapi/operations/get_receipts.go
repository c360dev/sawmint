// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/c360dev/sawmint/models"
)

// GetReceiptsHandlerFunc turns a function with the right signature into a get receipts handler
type GetReceiptsHandlerFunc func(GetReceiptsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReceiptsHandlerFunc) Handle(params GetReceiptsParams) middleware.Responder {
	return fn(params)
}

// GetReceiptsHandler interface for that can handle valid get receipts params
type GetReceiptsHandler interface {
	Handle(GetReceiptsParams) middleware.Responder
}

// NewGetReceipts creates a new http.Handler for the get receipts operation
func NewGetReceipts(ctx *middleware.Context, handler GetReceiptsHandler) *GetReceipts {
	return &GetReceipts{Context: ctx, Handler: handler}
}

/*GetReceipts swagger:route GET /receipts getReceipts

Fetches the receipts for a set of transactions

Fetches an array of objects for each receipt requested.

The receipt(s) you want to retrieve can be specified using the `id`
filter parameter, where `id` refers to the transaction id of the
transaction the receipt is associated with.


*/
type GetReceipts struct {
	Context *middleware.Context
	Handler GetReceiptsHandler
}

func (o *GetReceipts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReceiptsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetReceiptsOKBody get receipts o k body
// swagger:model GetReceiptsOKBody
type GetReceiptsOKBody struct {

	// data
	Data models.TransactionReceipts `json:"data,omitempty"`

	// link
	Link models.Link `json:"link,omitempty"`
}

// Validate validates this get receipts o k body
func (o *GetReceiptsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetReceiptsOKBody) validateLink(formats strfmt.Registry) error {

	if swag.IsZero(o.Link) { // not required
		return nil
	}

	if err := o.Link.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("getReceiptsOK" + "." + "link")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetReceiptsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetReceiptsOKBody) UnmarshalBinary(b []byte) error {
	var res GetReceiptsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
