// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetStateParams creates a new GetStateParams object
// with the default values initialized.
func NewGetStateParams() GetStateParams {

	var (
		// initialize parameters with default values

		headDefault  = string("latest")
		limitDefault = int64(1000)
	)

	return GetStateParams{
		Head: &headDefault,

		Limit: &limitDefault,
	}
}

// GetStateParams contains all the bound params for the get state operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetState
type GetStateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*A partial address to filter leaves by
	  In: query
	*/
	Address *string
	/*Index or id of head block
	  In: query
	  Default: "latest"
	*/
	Head *string
	/*Number of items to return
	  In: query
	  Default: 1000
	*/
	Limit *int64
	/*If the list should be reversed
	  In: query
	*/
	Reverse *string
	/*Id to start paging (inclusive)
	  In: query
	*/
	Start *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetStateParams() beforehand.
func (o *GetStateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAddress, qhkAddress, _ := qs.GetOK("address")
	if err := o.bindAddress(qAddress, qhkAddress, route.Formats); err != nil {
		res = append(res, err)
	}

	qHead, qhkHead, _ := qs.GetOK("head")
	if err := o.bindHead(qHead, qhkHead, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qReverse, qhkReverse, _ := qs.GetOK("reverse")
	if err := o.bindReverse(qReverse, qhkReverse, route.Formats); err != nil {
		res = append(res, err)
	}

	qStart, qhkStart, _ := qs.GetOK("start")
	if err := o.bindStart(qStart, qhkStart, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAddress binds and validates parameter Address from query.
func (o *GetStateParams) bindAddress(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Address = &raw

	return nil
}

// bindHead binds and validates parameter Head from query.
func (o *GetStateParams) bindHead(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetStateParams()
		return nil
	}

	o.Head = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetStateParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetStateParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindReverse binds and validates parameter Reverse from query.
func (o *GetStateParams) bindReverse(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Reverse = &raw

	return nil
}

// bindStart binds and validates parameter Start from query.
func (o *GetStateParams) bindStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Start = &raw

	return nil
}
