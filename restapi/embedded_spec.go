// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "_This HTTP pragmatic REST API is built on top of Sawtooth's\nexisting ZMQ/Protobuf infrastructure, simplifying client\ninteraction with the blockchain by exposing endpoints that\nuse common HTTP/JSON standards._\n",
    "title": "Sawtooth REST API",
    "version": "0.8.0"
  },
  "paths": {
    "/batch_statuses": {
      "get": {
        "description": "Fetches an array of objects with a status and id for each batch\nrequested. There are four possible statuses with string values\n` + "`" + `'COMMITTED'` + "`" + `, ` + "`" + `'INVALID'` + "`" + `, ` + "`" + `'PENDING'` + "`" + `, and ` + "`" + `'UNKNOWN'` + "`" + `.\n\nThe batch(es) you want to check can be specified using the ` + "`" + `id` + "`" + ` filter\nparameter. If a ` + "`" + `wait` + "`" + ` time is specified in the URL, the API will wait\nto respond until all batches are committed, or the time in seconds has\nelapsed. If the value of ` + "`" + `wait` + "`" + ` is not set (i.e., ` + "`" + `?wait\u0026id=...` + "`" + `), or\nit is set to any non-integer value other than ` + "`" + `false` + "`" + `, the wait time\nwill be just under the API's specified timeout (usually 300).\n\nNote that because this route does not return full resources, the\nresponse will not be paginated, and there will be no ` + "`" + `head` + "`" + ` or\n` + "`" + `paging` + "`" + ` properties.\n",
        "summary": "Fetches the committed statuses for a set of batches",
        "parameters": [
          {
            "type": "string",
            "description": "A comma-separated list of batch ids",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/parameters/wait"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved statuses",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/BatchStatuses"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      },
      "post": {
        "description": "Identical to ` + "`" + `GET /batch_statuses` + "`" + `, but takes ids of batches as a JSON\nformatted POST body rather than a query parameter. This allows for many\nmore batches to be checked and should be used for more than 15 ids.\n\nNote that because query information is not encoded in the URL, no ` + "`" + `link` + "`" + `\nwill be returned with this query.\n",
        "consumes": [
          "application/json"
        ],
        "summary": "Fetches the committed statuses for a set of batches",
        "parameters": [
          {
            "description": "A JSON array of batch id strings",
            "name": "Batch Ids",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
              }
            }
          },
          {
            "$ref": "#/parameters/wait"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved statuses",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/BatchStatuses"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      }
    },
    "/batches": {
      "get": {
        "description": "Fetches a paginated list of batches from the validator.\n",
        "summary": "Fetches a list of batches",
        "parameters": [
          {
            "$ref": "#/parameters/head"
          },
          {
            "$ref": "#/parameters/start"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/reverse"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved batches",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Batch"
                  }
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      },
      "post": {
        "description": "Accepts a protobuf formatted ` + "`" + `BatchList` + "`" + ` as an octet-stream binary\nfile and submits it to the validator to be committed.\n\nThe API will return immediately with a status of ` + "`" + `202` + "`" + `. There will be\nno ` + "`" + `data` + "`" + ` object, only a ` + "`" + `link` + "`" + ` to a ` + "`" + `/batch_statuses` + "`" + ` endpoint to be\npolled to check the status of submitted batches.\n",
        "consumes": [
          "application/octet-stream"
        ],
        "summary": "Sends a BatchList to the validator",
        "parameters": [
          {
            "description": "A binary encoded protobuf BatchList",
            "name": "BatchList",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchList"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Batches submitted for validation, but not yet committed",
            "schema": {
              "properties": {
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "429": {
            "$ref": "#/responses/429TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      }
    },
    "/batches/{batch_id}": {
      "get": {
        "summary": "Fetches a particular batch",
        "responses": {
          "200": {
            "description": "Successfully retrieved batch",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Batch"
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/responses/404NotFound"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/batch_id"
        }
      ]
    },
    "/blocks": {
      "get": {
        "description": "Fetches a paginated list of blocks from the validator.\n",
        "summary": "Fetches a list of blocks",
        "parameters": [
          {
            "$ref": "#/parameters/head"
          },
          {
            "$ref": "#/parameters/start"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/reverse"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved blocks",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Block"
                    }
                  ]
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      }
    },
    "/blocks/{block_id}": {
      "get": {
        "summary": "Fetches a particular block",
        "responses": {
          "200": {
            "description": "Successfully retrieved block",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Block"
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/responses/404NotFound"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/block_id"
        }
      ]
    },
    "/peers": {
      "get": {
        "summary": "Fetches the endpoints of the authorized peers of the validator",
        "responses": {
          "200": {
            "description": "Successfully retrieved peers",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "tcp://12.345.67.890:8800"
                  }
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      }
    },
    "/receipts": {
      "get": {
        "description": "Fetches an array of objects for each receipt requested.\n\nThe receipt(s) you want to retrieve can be specified using the ` + "`" + `id` + "`" + `\nfilter parameter, where ` + "`" + `id` + "`" + ` refers to the transaction id of the\ntransaction the receipt is associated with.\n",
        "summary": "Fetches the receipts for a set of transactions",
        "parameters": [
          {
            "type": "string",
            "description": "A comma-separated list of transaction ids",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction receipts",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/TransactionReceipts"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      },
      "post": {
        "description": "Identical to ` + "`" + `GET /receipts` + "`" + `, but takes ids of transactions as a JSON\nformatted POST body rather than a query parameter. This allows for many\nmore receipts to be fetched and should be used with more than 15 ids.\n\nNote that because query information is not encoded in the URL, no ` + "`" + `link` + "`" + `\nwill be returned with this request.\n",
        "consumes": [
          "application/json"
        ],
        "summary": "Fetches the receipts for a set of transactions",
        "parameters": [
          {
            "description": "A JSON array of transaction id strings",
            "name": "Transaction Ids",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
              }
            }
          },
          {
            "$ref": "#/parameters/wait"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction receipts",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/TransactionReceipts"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      }
    },
    "/state": {
      "get": {
        "description": "Fetches a paginated list of entries for the current state, or relative to a particular head block. Using the ` + "`" + `address` + "`" + ` filter parameter will narrow the list to any entries that have an address beginning with the characters specified.\nNote that the partial address in ` + "`" + `address` + "`" + ` parameter should have even  number of hecadeximal characters (i.e., complete bytes).\n",
        "summary": "Fetches the data for the current state",
        "parameters": [
          {
            "$ref": "#/parameters/head"
          },
          {
            "type": "string",
            "description": "A partial address to filter leaves by",
            "name": "address",
            "in": "query"
          },
          {
            "$ref": "#/parameters/start"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/reverse"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved state data",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Entry"
                  }
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      }
    },
    "/state/{address}": {
      "get": {
        "description": "Takes full 70-character address and fetches a particular leaf. For partial address (i.e., group of leaves) use ` + "`" + `/state` + "`" + ` above. \n",
        "summary": "Fetches a particular leaf from the current state",
        "parameters": [
          {
            "$ref": "#/parameters/head"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched leaves",
            "schema": {
              "properties": {
                "data": {
                  "type": "string",
                  "format": "byte",
                  "example": "Zm9vOmJhcg=="
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/responses/404NotFound"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/address"
        }
      ]
    },
    "/status": {
      "get": {
        "summary": "Fetches information pertaining to the status of the validator",
        "responses": {
          "200": {
            "description": "Successfully retrieved status",
            "schema": {
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "endpoint": {
                      "type": "string",
                      "example": "tcp://12.345.67.890:8800"
                    },
                    "peers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "endpoint": {
                            "type": "string",
                            "example": "tcp://12.345.67.890:8800"
                          }
                        }
                      }
                    }
                  }
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "description": "Fetches a paginated list of transactions from the validator.\n",
        "summary": "Fetches a list of transactions",
        "parameters": [
          {
            "$ref": "#/parameters/head"
          },
          {
            "$ref": "#/parameters/start"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/reverse"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transactions",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Transaction"
                    }
                  ]
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      }
    },
    "/transactions/{transaction_id}": {
      "get": {
        "summary": "Fetches a particular transaction",
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Block"
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400BadRequest"
          },
          "404": {
            "$ref": "#/responses/404NotFound"
          },
          "500": {
            "$ref": "#/responses/500ServerError"
          },
          "503": {
            "$ref": "#/responses/503ServiceUnavailable"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/transaction_id"
        }
      ]
    }
  },
  "definitions": {
    "Batch": {
      "properties": {
        "header": {
          "$ref": "#/definitions/BatchHeader"
        },
        "header_signature": {
          "type": "string",
          "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        }
      }
    },
    "BatchHeader": {
      "properties": {
        "signer_public_key": {
          "type": "string",
          "example": "038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00"
        },
        "transaction_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a"
          }
        }
      }
    },
    "BatchList": {
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Batch"
          }
        }
      }
    },
    "BatchStatuses": {
      "type": "array",
      "items": {
        "properties": {
          "id": {
            "type": "string",
            "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
          },
          "invalid_transactions": {
            "type": "array",
            "items": {
              "properties": {
                "extended_data": {
                  "type": "string",
                  "format": "byte",
                  "example": "ZXJyb3IgZGF0YQ=="
                },
                "id": {
                  "type": "string",
                  "example": "540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a"
                },
                "message": {
                  "type": "string",
                  "example": "Verb is \\\"inc\\\" but name \\\"foo\\\" not in state"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "COMMITTED",
              "INVALID",
              "PENDING",
              "UNKNOWN"
            ],
            "example": "INVALID"
          }
        }
      }
    },
    "Block": {
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Batch"
          }
        },
        "header": {
          "$ref": "#/definitions/BlockHeader"
        },
        "header_signature": {
          "type": "string",
          "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
        }
      }
    },
    "BlockHeader": {
      "properties": {
        "batch_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
          }
        },
        "block_num": {
          "type": "integer",
          "example": 12345
        },
        "consensus": {
          "type": "string",
          "format": "binary"
        },
        "previous_block_id": {
          "type": "string",
          "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
        },
        "signer_public_key": {
          "type": "string",
          "example": "02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758"
        },
        "state_root_hash": {
          "type": "string",
          "example": "708ca7fbb701799bb387f2e50deaca402e8502abe229f705693d2d4f350e1ad6"
        }
      }
    },
    "Entry": {
      "properties": {
        "address": {
          "type": "string",
          "example": "1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "example": "Zm9vOmJhcg=="
        }
      }
    },
    "Error": {
      "properties": {
        "code": {
          "type": "integer",
          "example": 34
        },
        "message": {
          "type": "string",
          "example": "The protobuf BatchList you submitted was empty and contained no Batches. You must submit at least one Batch.\n"
        },
        "title": {
          "type": "string",
          "example": "No Batches Submitted"
        }
      }
    },
    "Head": {
      "type": "string",
      "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
    },
    "Link": {
      "type": "string",
      "example": "https://api.sawtooth.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
    },
    "Paging": {
      "properties": {
        "limit": {
          "type": "integer",
          "example": 54321
        },
        "next": {
          "type": "string",
          "example": "https://api.sawtooth.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\u0026start=2000\u0026limit=1000"
        },
        "next_position": {
          "type": "string",
          "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
        },
        "start": {
          "type": "string",
          "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
        }
      }
    },
    "Transaction": {
      "properties": {
        "header": {
          "$ref": "#/definitions/TransactionHeader"
        },
        "header_signature": {
          "type": "string",
          "example": "540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a"
        },
        "payload": {
          "type": "string",
          "format": "binary"
        }
      }
    },
    "TransactionHeader": {
      "properties": {
        "batcher_public_key": {
          "type": "string",
          "example": "02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "1baee350bdb60bcee60e3d325d43283cf830b4c23b2cb17d3bb43935bd7af3761c2bee79847c72a9e396a9ae58f48add4e43f94eb83f84442c6085c1dd5d4dbe"
          }
        },
        "family_name": {
          "type": "string",
          "example": "intkey"
        },
        "family_version": {
          "type": "string",
          "example": "1.0"
        },
        "inputs": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
          }
        },
        "nonce": {
          "type": "string",
          "example": "QAApS4L"
        },
        "outputs": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
          }
        },
        "payload_sha512": {
          "type": "string",
          "example": "fb6135ef73f4fe77367f9384b3bbbb158f4b8603c9d612157108e5c271868fce2242ee4abd7a29397ba63780c3ccab13783dfd4d9f0167beda03cdb0e37b87f4"
        },
        "signer_public_key": {
          "type": "string",
          "example": "038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00"
        }
      }
    },
    "TransactionReceipt": {
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "binary"
          }
        },
        "events": {
          "type": "array",
          "items": {
            "properties": {
              "attributes": {
                "type": "array",
                "items": {
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "data": {
                "type": "string",
                "format": "binary"
              },
              "event_type": {
                "type": "string",
                "example": "sawtooth/block-commit"
              }
            }
          }
        },
        "state_changes": {
          "type": "array",
          "items": {
            "properties": {
              "address": {
                "type": "string",
                "example": "1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
              },
              "type": {
                "type": "string",
                "example": "SET"
              },
              "value": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "transaction_id": {
          "type": "string",
          "example": "540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a"
        }
      }
    },
    "TransactionReceipts": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/TransactionReceipt"
        }
      ]
    }
  },
  "parameters": {
    "address": {
      "type": "string",
      "description": "Radix address of a leaf",
      "name": "address",
      "in": "path",
      "required": true
    },
    "batch_id": {
      "type": "string",
      "description": "Batch id",
      "name": "batch_id",
      "in": "path",
      "required": true
    },
    "block_id": {
      "type": "string",
      "description": "Block id",
      "name": "block_id",
      "in": "path",
      "required": true
    },
    "head": {
      "type": "string",
      "default": "latest",
      "description": "Index or id of head block",
      "name": "head",
      "in": "query"
    },
    "limit": {
      "type": "integer",
      "default": 1000,
      "description": "Number of items to return",
      "name": "limit",
      "in": "query"
    },
    "reverse": {
      "type": "string",
      "description": "If the list should be reversed",
      "name": "reverse",
      "in": "query"
    },
    "start": {
      "type": "string",
      "description": "Id to start paging (inclusive)",
      "name": "start",
      "in": "query"
    },
    "transaction_id": {
      "type": "string",
      "description": "Transaction id",
      "name": "transaction_id",
      "in": "path",
      "required": true
    },
    "wait": {
      "type": "integer",
      "description": "A time in seconds to wait for commit",
      "name": "wait",
      "in": "query"
    }
  },
  "responses": {
    "400BadRequest": {
      "description": "Request was malformed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "404NotFound": {
      "description": "Address or id did not match any resource",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "429TooManyRequests": {
      "description": "Too many requests have been made to process batches",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "500ServerError": {
      "description": "Something went wrong within the validator",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "503ServiceUnavailable": {
      "description": "API is unable to reach the validator",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "_This HTTP pragmatic REST API is built on top of Sawtooth's\nexisting ZMQ/Protobuf infrastructure, simplifying client\ninteraction with the blockchain by exposing endpoints that\nuse common HTTP/JSON standards._\n",
    "title": "Sawtooth REST API",
    "version": "0.8.0"
  },
  "paths": {
    "/batch_statuses": {
      "get": {
        "description": "Fetches an array of objects with a status and id for each batch\nrequested. There are four possible statuses with string values\n` + "`" + `'COMMITTED'` + "`" + `, ` + "`" + `'INVALID'` + "`" + `, ` + "`" + `'PENDING'` + "`" + `, and ` + "`" + `'UNKNOWN'` + "`" + `.\n\nThe batch(es) you want to check can be specified using the ` + "`" + `id` + "`" + ` filter\nparameter. If a ` + "`" + `wait` + "`" + ` time is specified in the URL, the API will wait\nto respond until all batches are committed, or the time in seconds has\nelapsed. If the value of ` + "`" + `wait` + "`" + ` is not set (i.e., ` + "`" + `?wait\u0026id=...` + "`" + `), or\nit is set to any non-integer value other than ` + "`" + `false` + "`" + `, the wait time\nwill be just under the API's specified timeout (usually 300).\n\nNote that because this route does not return full resources, the\nresponse will not be paginated, and there will be no ` + "`" + `head` + "`" + ` or\n` + "`" + `paging` + "`" + ` properties.\n",
        "summary": "Fetches the committed statuses for a set of batches",
        "parameters": [
          {
            "type": "string",
            "description": "A comma-separated list of batch ids",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "A time in seconds to wait for commit",
            "name": "wait",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved statuses",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/BatchStatuses"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Identical to ` + "`" + `GET /batch_statuses` + "`" + `, but takes ids of batches as a JSON\nformatted POST body rather than a query parameter. This allows for many\nmore batches to be checked and should be used for more than 15 ids.\n\nNote that because query information is not encoded in the URL, no ` + "`" + `link` + "`" + `\nwill be returned with this query.\n",
        "consumes": [
          "application/json"
        ],
        "summary": "Fetches the committed statuses for a set of batches",
        "parameters": [
          {
            "description": "A JSON array of batch id strings",
            "name": "Batch Ids",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
              }
            }
          },
          {
            "type": "integer",
            "description": "A time in seconds to wait for commit",
            "name": "wait",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved statuses",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/BatchStatuses"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/batches": {
      "get": {
        "description": "Fetches a paginated list of batches from the validator.\n",
        "summary": "Fetches a list of batches",
        "parameters": [
          {
            "type": "string",
            "default": "latest",
            "description": "Index or id of head block",
            "name": "head",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Id to start paging (inclusive)",
            "name": "start",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If the list should be reversed",
            "name": "reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved batches",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Batch"
                  }
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Accepts a protobuf formatted ` + "`" + `BatchList` + "`" + ` as an octet-stream binary\nfile and submits it to the validator to be committed.\n\nThe API will return immediately with a status of ` + "`" + `202` + "`" + `. There will be\nno ` + "`" + `data` + "`" + ` object, only a ` + "`" + `link` + "`" + ` to a ` + "`" + `/batch_statuses` + "`" + ` endpoint to be\npolled to check the status of submitted batches.\n",
        "consumes": [
          "application/octet-stream"
        ],
        "summary": "Sends a BatchList to the validator",
        "parameters": [
          {
            "description": "A binary encoded protobuf BatchList",
            "name": "BatchList",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchList"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Batches submitted for validation, but not yet committed",
            "schema": {
              "properties": {
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "429": {
            "description": "Too many requests have been made to process batches",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/batches/{batch_id}": {
      "get": {
        "summary": "Fetches a particular batch",
        "responses": {
          "200": {
            "description": "Successfully retrieved batch",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Batch"
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Address or id did not match any resource",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Batch id",
          "name": "batch_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/blocks": {
      "get": {
        "description": "Fetches a paginated list of blocks from the validator.\n",
        "summary": "Fetches a list of blocks",
        "parameters": [
          {
            "type": "string",
            "default": "latest",
            "description": "Index or id of head block",
            "name": "head",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Id to start paging (inclusive)",
            "name": "start",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If the list should be reversed",
            "name": "reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved blocks",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Block"
                    }
                  ]
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/blocks/{block_id}": {
      "get": {
        "summary": "Fetches a particular block",
        "responses": {
          "200": {
            "description": "Successfully retrieved block",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Block"
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Address or id did not match any resource",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Block id",
          "name": "block_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/peers": {
      "get": {
        "summary": "Fetches the endpoints of the authorized peers of the validator",
        "responses": {
          "200": {
            "description": "Successfully retrieved peers",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "tcp://12.345.67.890:8800"
                  }
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/receipts": {
      "get": {
        "description": "Fetches an array of objects for each receipt requested.\n\nThe receipt(s) you want to retrieve can be specified using the ` + "`" + `id` + "`" + `\nfilter parameter, where ` + "`" + `id` + "`" + ` refers to the transaction id of the\ntransaction the receipt is associated with.\n",
        "summary": "Fetches the receipts for a set of transactions",
        "parameters": [
          {
            "type": "string",
            "description": "A comma-separated list of transaction ids",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction receipts",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/TransactionReceipts"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Identical to ` + "`" + `GET /receipts` + "`" + `, but takes ids of transactions as a JSON\nformatted POST body rather than a query parameter. This allows for many\nmore receipts to be fetched and should be used with more than 15 ids.\n\nNote that because query information is not encoded in the URL, no ` + "`" + `link` + "`" + `\nwill be returned with this request.\n",
        "consumes": [
          "application/json"
        ],
        "summary": "Fetches the receipts for a set of transactions",
        "parameters": [
          {
            "description": "A JSON array of transaction id strings",
            "name": "Transaction Ids",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
              }
            }
          },
          {
            "type": "integer",
            "description": "A time in seconds to wait for commit",
            "name": "wait",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction receipts",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/TransactionReceipts"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/state": {
      "get": {
        "description": "Fetches a paginated list of entries for the current state, or relative to a particular head block. Using the ` + "`" + `address` + "`" + ` filter parameter will narrow the list to any entries that have an address beginning with the characters specified.\nNote that the partial address in ` + "`" + `address` + "`" + ` parameter should have even  number of hecadeximal characters (i.e., complete bytes).\n",
        "summary": "Fetches the data for the current state",
        "parameters": [
          {
            "type": "string",
            "default": "latest",
            "description": "Index or id of head block",
            "name": "head",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A partial address to filter leaves by",
            "name": "address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Id to start paging (inclusive)",
            "name": "start",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If the list should be reversed",
            "name": "reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved state data",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Entry"
                  }
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/state/{address}": {
      "get": {
        "description": "Takes full 70-character address and fetches a particular leaf. For partial address (i.e., group of leaves) use ` + "`" + `/state` + "`" + ` above. \n",
        "summary": "Fetches a particular leaf from the current state",
        "parameters": [
          {
            "type": "string",
            "default": "latest",
            "description": "Index or id of head block",
            "name": "head",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched leaves",
            "schema": {
              "properties": {
                "data": {
                  "type": "string",
                  "format": "byte",
                  "example": "Zm9vOmJhcg=="
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Address or id did not match any resource",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Radix address of a leaf",
          "name": "address",
          "in": "path",
          "required": true
        }
      ]
    },
    "/status": {
      "get": {
        "summary": "Fetches information pertaining to the status of the validator",
        "responses": {
          "200": {
            "description": "Successfully retrieved status",
            "schema": {
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "endpoint": {
                      "type": "string",
                      "example": "tcp://12.345.67.890:8800"
                    },
                    "peers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "endpoint": {
                            "type": "string",
                            "example": "tcp://12.345.67.890:8800"
                          }
                        }
                      }
                    }
                  }
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "description": "Fetches a paginated list of transactions from the validator.\n",
        "summary": "Fetches a list of transactions",
        "parameters": [
          {
            "type": "string",
            "default": "latest",
            "description": "Index or id of head block",
            "name": "head",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Id to start paging (inclusive)",
            "name": "start",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of items to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If the list should be reversed",
            "name": "reverse",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved transactions",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/Transaction"
                    }
                  ]
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                },
                "paging": {
                  "$ref": "#/definitions/Paging"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}": {
      "get": {
        "summary": "Fetches a particular transaction",
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Block"
                },
                "head": {
                  "$ref": "#/definitions/Head"
                },
                "link": {
                  "$ref": "#/definitions/Link"
                }
              }
            }
          },
          "400": {
            "description": "Request was malformed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Address or id did not match any resource",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Something went wrong within the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "API is unable to reach the validator",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Transaction id",
          "name": "transaction_id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Batch": {
      "properties": {
        "header": {
          "$ref": "#/definitions/BatchHeader"
        },
        "header_signature": {
          "type": "string",
          "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          }
        }
      }
    },
    "BatchHeader": {
      "properties": {
        "signer_public_key": {
          "type": "string",
          "example": "038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00"
        },
        "transaction_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a"
          }
        }
      }
    },
    "BatchList": {
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Batch"
          }
        }
      }
    },
    "BatchStatuses": {
      "type": "array",
      "items": {
        "properties": {
          "id": {
            "type": "string",
            "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
          },
          "invalid_transactions": {
            "type": "array",
            "items": {
              "properties": {
                "extended_data": {
                  "type": "string",
                  "format": "byte",
                  "example": "ZXJyb3IgZGF0YQ=="
                },
                "id": {
                  "type": "string",
                  "example": "540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a"
                },
                "message": {
                  "type": "string",
                  "example": "Verb is \\\"inc\\\" but name \\\"foo\\\" not in state"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "COMMITTED",
              "INVALID",
              "PENDING",
              "UNKNOWN"
            ],
            "example": "INVALID"
          }
        }
      }
    },
    "Block": {
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Batch"
          }
        },
        "header": {
          "$ref": "#/definitions/BlockHeader"
        },
        "header_signature": {
          "type": "string",
          "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
        }
      }
    },
    "BlockHeader": {
      "properties": {
        "batch_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "89807bfc9089e37e00d87d97357de14cfbc455cd608438d426a625a30a0da9a31c406983803c4aa27e1f32a3ff61709e8ec4b56abbc553d7d330635b5d27029c"
          }
        },
        "block_num": {
          "type": "integer",
          "example": 12345
        },
        "consensus": {
          "type": "string",
          "format": "binary"
        },
        "previous_block_id": {
          "type": "string",
          "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
        },
        "signer_public_key": {
          "type": "string",
          "example": "02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758"
        },
        "state_root_hash": {
          "type": "string",
          "example": "708ca7fbb701799bb387f2e50deaca402e8502abe229f705693d2d4f350e1ad6"
        }
      }
    },
    "Entry": {
      "properties": {
        "address": {
          "type": "string",
          "example": "1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "example": "Zm9vOmJhcg=="
        }
      }
    },
    "Error": {
      "properties": {
        "code": {
          "type": "integer",
          "example": 34
        },
        "message": {
          "type": "string",
          "example": "The protobuf BatchList you submitted was empty and contained no Batches. You must submit at least one Batch.\n"
        },
        "title": {
          "type": "string",
          "example": "No Batches Submitted"
        }
      }
    },
    "Head": {
      "type": "string",
      "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
    },
    "Link": {
      "type": "string",
      "example": "https://api.sawtooth.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
    },
    "Paging": {
      "properties": {
        "limit": {
          "type": "integer",
          "example": 54321
        },
        "next": {
          "type": "string",
          "example": "https://api.sawtooth.com/state?head=65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd\u0026start=2000\u0026limit=1000"
        },
        "next_position": {
          "type": "string",
          "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
        },
        "start": {
          "type": "string",
          "example": "65cd3a3ce088b265b626f704b7f3db97b6f12e848dccb35d7806f3d0324c71b709ed360d602b8b658b94695374717e3bdb4b76f77886953777d5d008558247dd"
        }
      }
    },
    "Transaction": {
      "properties": {
        "header": {
          "$ref": "#/definitions/TransactionHeader"
        },
        "header_signature": {
          "type": "string",
          "example": "540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a"
        },
        "payload": {
          "type": "string",
          "format": "binary"
        }
      }
    },
    "TransactionHeader": {
      "properties": {
        "batcher_public_key": {
          "type": "string",
          "example": "02d260a46457a064733153e09840c322bee1dff34445d7d49e19e60abd18fd0758"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "1baee350bdb60bcee60e3d325d43283cf830b4c23b2cb17d3bb43935bd7af3761c2bee79847c72a9e396a9ae58f48add4e43f94eb83f84442c6085c1dd5d4dbe"
          }
        },
        "family_name": {
          "type": "string",
          "example": "intkey"
        },
        "family_version": {
          "type": "string",
          "example": "1.0"
        },
        "inputs": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
          }
        },
        "nonce": {
          "type": "string",
          "example": "QAApS4L"
        },
        "outputs": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
          }
        },
        "payload_sha512": {
          "type": "string",
          "example": "fb6135ef73f4fe77367f9384b3bbbb158f4b8603c9d612157108e5c271868fce2242ee4abd7a29397ba63780c3ccab13783dfd4d9f0167beda03cdb0e37b87f4"
        },
        "signer_public_key": {
          "type": "string",
          "example": "038bba5708acc262464c9fe30d3de9e905a9a5fa30cedd151dd9cd09ea26d46d00"
        }
      }
    },
    "TransactionReceipt": {
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "binary"
          }
        },
        "events": {
          "type": "array",
          "items": {
            "properties": {
              "attributes": {
                "type": "array",
                "items": {
                  "properties": {
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "data": {
                "type": "string",
                "format": "binary"
              },
              "event_type": {
                "type": "string",
                "example": "sawtooth/block-commit"
              }
            }
          }
        },
        "state_changes": {
          "type": "array",
          "items": {
            "properties": {
              "address": {
                "type": "string",
                "example": "1cf12650d858e0985ecc7f60418aaf0cc5ab587f42c2570a884095a9e8ccacd0f6545c"
              },
              "type": {
                "type": "string",
                "example": "SET"
              },
              "value": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "transaction_id": {
          "type": "string",
          "example": "540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a"
        }
      }
    },
    "TransactionReceipts": {
      "type": "array",
      "items": [
        {
          "$ref": "#/definitions/TransactionReceipt"
        }
      ]
    }
  },
  "parameters": {
    "address": {
      "type": "string",
      "description": "Radix address of a leaf",
      "name": "address",
      "in": "path",
      "required": true
    },
    "batch_id": {
      "type": "string",
      "description": "Batch id",
      "name": "batch_id",
      "in": "path",
      "required": true
    },
    "block_id": {
      "type": "string",
      "description": "Block id",
      "name": "block_id",
      "in": "path",
      "required": true
    },
    "head": {
      "type": "string",
      "default": "latest",
      "description": "Index or id of head block",
      "name": "head",
      "in": "query"
    },
    "limit": {
      "type": "integer",
      "default": 1000,
      "description": "Number of items to return",
      "name": "limit",
      "in": "query"
    },
    "reverse": {
      "type": "string",
      "description": "If the list should be reversed",
      "name": "reverse",
      "in": "query"
    },
    "start": {
      "type": "string",
      "description": "Id to start paging (inclusive)",
      "name": "start",
      "in": "query"
    },
    "transaction_id": {
      "type": "string",
      "description": "Transaction id",
      "name": "transaction_id",
      "in": "path",
      "required": true
    },
    "wait": {
      "type": "integer",
      "description": "A time in seconds to wait for commit",
      "name": "wait",
      "in": "query"
    }
  },
  "responses": {
    "400BadRequest": {
      "description": "Request was malformed",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "404NotFound": {
      "description": "Address or id did not match any resource",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "429TooManyRequests": {
      "description": "Too many requests have been made to process batches",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "500ServerError": {
      "description": "Something went wrong within the validator",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "503ServiceUnavailable": {
      "description": "API is unable to reach the validator",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    }
  }
}`))
}
