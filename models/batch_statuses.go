// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BatchStatuses batch statuses
// swagger:model BatchStatuses
type BatchStatuses []*BatchStatusesItems0

// Validate validates this batch statuses
func (m BatchStatuses) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// BatchStatusesItems0 batch statuses items0
// swagger:model BatchStatusesItems0
type BatchStatusesItems0 struct {

	// id
	ID string `json:"id,omitempty"`

	// invalid transactions
	InvalidTransactions []*BatchStatusesItems0InvalidTransactionsItems0 `json:"invalid_transactions"`

	// status
	// Enum: [COMMITTED INVALID PENDING UNKNOWN]
	Status string `json:"status,omitempty"`
}

// Validate validates this batch statuses items0
func (m *BatchStatusesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvalidTransactions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchStatusesItems0) validateInvalidTransactions(formats strfmt.Registry) error {

	if swag.IsZero(m.InvalidTransactions) { // not required
		return nil
	}

	for i := 0; i < len(m.InvalidTransactions); i++ {
		if swag.IsZero(m.InvalidTransactions[i]) { // not required
			continue
		}

		if m.InvalidTransactions[i] != nil {
			if err := m.InvalidTransactions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invalid_transactions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var batchStatusesItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COMMITTED","INVALID","PENDING","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		batchStatusesItems0TypeStatusPropEnum = append(batchStatusesItems0TypeStatusPropEnum, v)
	}
}

const (

	// BatchStatusesItems0StatusCOMMITTED captures enum value "COMMITTED"
	BatchStatusesItems0StatusCOMMITTED string = "COMMITTED"

	// BatchStatusesItems0StatusINVALID captures enum value "INVALID"
	BatchStatusesItems0StatusINVALID string = "INVALID"

	// BatchStatusesItems0StatusPENDING captures enum value "PENDING"
	BatchStatusesItems0StatusPENDING string = "PENDING"

	// BatchStatusesItems0StatusUNKNOWN captures enum value "UNKNOWN"
	BatchStatusesItems0StatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *BatchStatusesItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, batchStatusesItems0TypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BatchStatusesItems0) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BatchStatusesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchStatusesItems0) UnmarshalBinary(b []byte) error {
	var res BatchStatusesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BatchStatusesItems0InvalidTransactionsItems0 batch statuses items0 invalid transactions items0
// swagger:model BatchStatusesItems0InvalidTransactionsItems0
type BatchStatusesItems0InvalidTransactionsItems0 struct {

	// extended data
	// Format: byte
	ExtendedData strfmt.Base64 `json:"extended_data,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this batch statuses items0 invalid transactions items0
func (m *BatchStatusesItems0InvalidTransactionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtendedData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchStatusesItems0InvalidTransactionsItems0) validateExtendedData(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtendedData) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

// MarshalBinary interface implementation
func (m *BatchStatusesItems0InvalidTransactionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchStatusesItems0InvalidTransactionsItems0) UnmarshalBinary(b []byte) error {
	var res BatchStatusesItems0InvalidTransactionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
