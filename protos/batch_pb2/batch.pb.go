// Code generated by protoc-gen-go. DO NOT EDIT.
// source: batch.proto

package batch_pb2

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BatchHeader struct {
	// Public key for the client that signed the BatchHeader
	SignerPublicKey string `protobuf:"bytes,1,opt,name=signer_public_key,json=signerPublicKey,proto3" json:"signer_public_key,omitempty"`
	// List of transaction.header_signatures that match the order of
	// transactions required for the batch
	TransactionIds       []string `protobuf:"bytes,2,rep,name=transaction_ids,json=transactionIds,proto3" json:"transaction_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchHeader) Reset()         { *m = BatchHeader{} }
func (m *BatchHeader) String() string { return proto.CompactTextString(m) }
func (*BatchHeader) ProtoMessage()    {}
func (*BatchHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{0}
}

func (m *BatchHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchHeader.Unmarshal(m, b)
}
func (m *BatchHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchHeader.Marshal(b, m, deterministic)
}
func (m *BatchHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchHeader.Merge(m, src)
}
func (m *BatchHeader) XXX_Size() int {
	return xxx_messageInfo_BatchHeader.Size(m)
}
func (m *BatchHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BatchHeader proto.InternalMessageInfo

func (m *BatchHeader) GetSignerPublicKey() string {
	if m != nil {
		return m.SignerPublicKey
	}
	return ""
}

func (m *BatchHeader) GetTransactionIds() []string {
	if m != nil {
		return m.TransactionIds
	}
	return nil
}

type Batch struct {
	// The serialized version of the BlockHeader
	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The signature derived from signing the header
	HeaderSignature string `protobuf:"bytes,2,opt,name=header_signature,json=headerSignature,proto3" json:"header_signature,omitempty"`
	// A list of the transactions that match the list of
	// transaction_ids listed in the batch header
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// A debugging flag which indicates this batch should be traced through the
	// system, resulting in a higher level of debugging output.
	Trace                bool     `protobuf:"varint,4,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{1}
}

func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Batch) GetHeaderSignature() string {
	if m != nil {
		return m.HeaderSignature
	}
	return ""
}

func (m *Batch) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Batch) GetTrace() bool {
	if m != nil {
		return m.Trace
	}
	return false
}

type BatchList struct {
	Batches              []*Batch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchList) Reset()         { *m = BatchList{} }
func (m *BatchList) String() string { return proto.CompactTextString(m) }
func (*BatchList) ProtoMessage()    {}
func (*BatchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_905061dbf2994c5e, []int{2}
}

func (m *BatchList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchList.Unmarshal(m, b)
}
func (m *BatchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchList.Marshal(b, m, deterministic)
}
func (m *BatchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchList.Merge(m, src)
}
func (m *BatchList) XXX_Size() int {
	return xxx_messageInfo_BatchList.Size(m)
}
func (m *BatchList) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchList.DiscardUnknown(m)
}

var xxx_messageInfo_BatchList proto.InternalMessageInfo

func (m *BatchList) GetBatches() []*Batch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func init() {
	proto.RegisterType((*BatchHeader)(nil), "BatchHeader")
	proto.RegisterType((*Batch)(nil), "Batch")
	proto.RegisterType((*BatchList)(nil), "BatchList")
}

func init() { proto.RegisterFile("batch.proto", fileDescriptor_905061dbf2994c5e) }

var fileDescriptor_905061dbf2994c5e = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0xc9, 0xe6, 0xaa, 0x3d, 0x2d, 0xce, 0x05, 0x95, 0xe0, 0x55, 0x29, 0x82, 0x55, 0xb0,
	0xc8, 0x7c, 0x83, 0x5d, 0x29, 0x7a, 0x31, 0xa2, 0x57, 0xde, 0x94, 0xa4, 0x8d, 0x36, 0x4c, 0x9a,
	0x92, 0xa4, 0xc8, 0x5e, 0xc3, 0x27, 0x96, 0x9d, 0x38, 0xac, 0x77, 0x39, 0xdf, 0xf9, 0xf9, 0xbf,
	0x70, 0x20, 0x91, 0xc2, 0xd7, 0x6d, 0xd9, 0x5b, 0xe3, 0xcd, 0xc5, 0xc2, 0x5b, 0xd1, 0x39, 0x51,
	0x7b, 0x6d, 0xba, 0x80, 0x72, 0x09, 0xc9, 0x6a, 0x97, 0x78, 0x50, 0xa2, 0x51, 0x96, 0xde, 0xc0,
	0xc2, 0xe9, 0x8f, 0x4e, 0xd9, 0xaa, 0x1f, 0xe4, 0xa7, 0xae, 0xab, 0x8d, 0xda, 0x32, 0x92, 0x91,
	0x22, 0xe6, 0xf3, 0xb0, 0x58, 0x23, 0x7f, 0x52, 0x5b, 0x7a, 0x05, 0xf3, 0x51, 0x5f, 0xa5, 0x1b,
	0xc7, 0x26, 0xd9, 0xb4, 0x88, 0xf9, 0xf1, 0x08, 0x3f, 0x36, 0x2e, 0xff, 0x26, 0x30, 0x43, 0x09,
	0x3d, 0x87, 0xa8, 0x45, 0x11, 0x76, 0xa6, 0xfc, 0x77, 0xa2, 0xd7, 0x70, 0x12, 0x5e, 0xd5, 0x4e,
	0x22, 0xfc, 0x60, 0x15, 0x9b, 0x04, 0x6b, 0xe0, 0x2f, 0x7b, 0x4c, 0xef, 0x20, 0x1d, 0xd5, 0x3b,
	0x36, 0xcd, 0xa6, 0x45, 0xb2, 0x4c, 0xcb, 0xd7, 0x3f, 0xc8, 0xff, 0x25, 0xe8, 0x29, 0xcc, 0xbc,
	0x15, 0xb5, 0x62, 0x07, 0x19, 0x29, 0x8e, 0x78, 0x18, 0xf2, 0x5b, 0x88, 0xf1, 0x4f, 0xcf, 0xda,
	0x79, 0x9a, 0xc1, 0x21, 0xde, 0x49, 0x39, 0x46, 0xb0, 0x2f, 0x2a, 0x71, 0xc9, 0xf7, 0x78, 0x75,
	0x09, 0x67, 0x4e, 0x7c, 0x79, 0x63, 0x7c, 0x5b, 0xba, 0x66, 0x13, 0xae, 0x27, 0x87, 0xf7, 0x35,
	0x79, 0x8b, 0x31, 0x53, 0xf5, 0x72, 0x29, 0x23, 0xc4, 0xf7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x38, 0xd3, 0xa7, 0xd1, 0x76, 0x01, 0x00, 0x00,
}
